% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cnc_sp_output.R
\name{cnc_sp_output}
\alias{cnc_sp_output}
\title{Clinical Events and Specialties -- Output Generation}
\usage{
cnc_sp_output(
  cnc_sp_process_output,
  cnc_sp_process_names,
  multi_or_single_site,
  anomaly_or_exploratory,
  time = FALSE,
  facet_vars,
  top_n = 15,
  n_mad = 3L,
  specialty_filter = NULL,
  p_value = 0.9
)
}
\arguments{
\item{cnc_sp_process_output}{output from the \code{cnc_sp_process} function}

\item{cnc_sp_process_names}{classified names from the output from the \code{cnc_sp_process} function,
expected to minimally contain the columns:
- specialty_concept_id: unchanged from the \code{cnc_sp_process} output
- specialty_name: the assigned classification
this table will be joined to \code{cnc_sp_process_output}, so all specialty_concept_id in the \code{conc_process_output} should be in \code{conc_process_names}}

\item{multi_or_single_site}{string indicating whether to generate output for single site or multiple site checks:
- 'multi' for multiple
- 'single' for single}

\item{anomaly_or_exploratory}{string indicating whether to generate output for anomaly detection or exploratory analysis:
- 'anomaly' for anomaly detection
- 'exploratory' for exploratory analysis}

\item{time}{TRUE if should have a time dimension}

\item{facet_vars}{vector of variable names to facet by}

\item{top_n}{integer value for choosing the "top n" to display per check, with meaning dependent on the context of the check}

\item{n_mad}{number of MAD from the median for which to flag anomalies
defaults to 3}

\item{specialty_filter}{an optional filter to apply to the specialty_name field to narrow down results}

\item{p_value}{the p value to be used as a threshold in the multi-site anomaly detection analysis}
}
\value{
the corresponding visualization/s for the site level (multi/single), time dimension,
and analysis level (exploratory/anomaly detection) specified
}
\description{
Using BOTH tabular outputs generated by \code{cnc_sp_process}, this function will build a graph to
visualize the results. Each function configuration will output a bespoke ggplot. Theming can
be adjusted by the user after the graph has been output using \code{+ theme()}. Most graphs can
also be made interactive using \code{make_interactive_squba()}
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'clinicalevents.specialties'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'cnc_sp_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = system.file('extdata',
                                        package = 'clinicalevents.specialties'),
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000),
                #RSQLite does not store date objects,
                #hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Prepare input tables
cnc_sp_visit_tbl <- dplyr::tibble(visit_concept_id = c(9201,9202,9203),
                                  visit_type = c('inpatient', 'outpatient', 'emergency'))

cnc_sp_concept_tbl <- dplyr::tibble(domain = 'Hypertension',
                                    domain_tbl = 'condition_occurrence',
                                    concept_field = 'condition_concept_id',
                                    date_field = 'condition_start_date',
                                    vocabulary_field = NA,
                                    codeset_name = 'dx_hypertension')

#' Execute `cnc_sp_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
cnc_sp_process_example <- cnc_sp_process(cohort = cohort,
                                         omop_or_pcornet = 'omop',
                                         multi_or_single_site = 'single',
                                         codeset_tbl = cnc_sp_concept_tbl,
                                         visit_type_tbl = cnc_sp_visit_tbl,
                                         time = FALSE)

cnc_sp_process_example$cnc_sp_process_output
cnc_sp_process_example$cnc_sp_process_names

#' Execute `cnc_sp_output` function
cnc_sp_output_example <-
  cnc_sp_output(cnc_sp_process_output =
                  cnc_sp_process_example$cnc_sp_process_output,
                cnc_sp_process_names =
                  cnc_sp_process_example$cnc_sp_process_names \%>\%
                    dplyr::mutate(specialty_name = 'General Pediatrics'),
                multi_or_single_site = 'single',
                anomaly_or_exploratory = 'exploratory',
                time = FALSE,
                facet_vars = c('visit_type'))

cnc_sp_output_example

#' Easily convert the graph into an interactive ggiraph or plotly object with
#' `make_interactive_ssdqa()`

make_interactive_ssdqa(cnc_sp_output_example)
}
