% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cnc_sp_process.R
\name{cnc_sp_process}
\alias{cnc_sp_process}
\title{Clinical Events and Specialties}
\usage{
cnc_sp_process(
  cohort,
  multi_or_single_site = "multi",
  omop_or_pcornet,
  age_groups = NULL,
  codeset_tbl,
  care_site = FALSE,
  provider = TRUE,
  visit_type_tbl = NULL,
  time = FALSE,
  time_span = c("2012-01-01", "2020-01-01"),
  time_period = "year",
  vocab_tbl = NULL
)
}
\arguments{
\item{cohort}{\itemize{
\item A dataframe with the cohort of patients for your study. Should include the columns:
\item \code{site}
\item \code{person_id}
\item \code{start_date}
\item \code{end_date}
}}

\item{multi_or_single_site}{Option to run the function on a single vs multiple sites
- \code{single}: run on a single site, or treat all of the sites as one
- \code{multi}: run on a group of sites, treating each site separately}

\item{omop_or_pcornet}{Option to run the function using the OMOP or PCORnet CDM as the default CDM
\itemize{
\item \code{omop}: run the \code{\link[=cnc_sp_process_omop]{cnc_sp_process_omop()}} function against an OMOP CDM instance
\item \code{pcornet}: run the \code{\link[=cnc_sp_process_pcornet]{cnc_sp_process_pcornet()}} function against a PCORnet CDM instance
}}

\item{age_groups}{If you would like to stratify the results by age group,  create a table or CSV file with the following
columns and include it as the \code{age_groups} function parameter:
\itemize{
\item \code{min_age}: the minimum age for the group (i.e. 10)
\item \code{max_age}: the maximum age for the group (i.e. 20)
\item \code{group}: a string label for the group (i.e. 10-20, Young Adult, etc.)
}

If you would \emph{not} like to stratify by age group, leave the argument as NULL}

\item{codeset_tbl}{table in the specs directory with the columns:
\itemize{
\item \code{domain}: name of the domain
\item \code{domain_tbl}: name of the cdm_tbl
\item \code{concept_field}: column name in the domain_tbl for which to search the codeset concept_ids
\item \code{date_field}: column name in the domain_tbl to be used for time-based filtering
\item \code{codeset_name}: name of a codeset that exists as a csv file in the specs directory.
}

The codeset can optionally contain a \code{cluster} column specifying subgroups of the codeset,
and if so, the results will be stratified by cluster}

\item{care_site}{TRUE if want to look at care_site specialty (specialty_concept_id in the care_site table)
FALSE if do not want to look at care_site specialty}

\item{provider}{TRUE if want to look at provider specialty (specialty_concept_id in the provider table)
FALSE if do not want to look at provider specialty
IF both \code{provider} and \code{care_site} are both TRUE,
provider specialty will be prioritized if provider and care_site are discordant for the visit}

\item{visit_type_tbl}{a table that defines available visit types that are called in \code{visit_types.} defaults to the provided
\code{cnc_sp_visit_file_(omop/pcornet)} file, which contains the following fields:
\itemize{
\item \code{visit_concept_id} / \code{visit_detail_concept_id} or \code{enc_type}: the visit_(detail)_concept_id or enc_type that represents the visit type of interest (i.e. 9201 or IP)
\item \code{visit_type}: the string label to describe the visit type; this label can be used multiple times
within the file if multiple visit_concept_ids/enc_types represent the visit type
}}

\item{time}{TRUE if results should be over time. Defaults to FALSE}

\item{time_span}{if time=TRUE, vector containing minimum and maximum dates over which to measure}

\item{time_period}{if time=TRUE, indicates time period (e.g. 'year', 'month') over which to measure}

\item{vocab_tbl}{location of vocabulary table containing concept_id to concept_name mapping. If a vocabulary table is not available, will default to NULL}
}
\value{
2 tables:
1 table containing all of the specialties in the results of the
DQ check, with the columns:
- \code{specialty_concept_id}: an identifier for the specialty based on the data model
- \code{specialty_concept_name}: if a \code{vocab_tbl} is provided, the name of the specialty
that corresponds to each specialty_concept_id. If no \code{vocab_tbl} is provided,
defaults to 'No vocabulary table input'
1 table containing counts of visits, optionally stratified by visit and/or time period,
with each specialty for the visits meeting criteria (i.e. those with the clinical fact provided)
}
\description{
This is a concordance module that will assess the types of specialty care received by and
quality of specialty data found in a study sample. The user will provide a
clinical codeset of interest (\code{codeset_tbl}) with an associated domain
and will be able to stratify results by: visit type
(with user-provided groupings in \code{visit_type_tbl}), cluster
(an additional column added to \code{codeset_tbl} with subgroupings), or time
}
\examples{

#' Source setup file
source(system.file('setup.R', package = 'clinicalevents.specialties'))

#' Create in-memory RSQLite database using data in extdata directory
conn <- mk_testdb_omop()

#' Establish connection to database and generate internal configurations
initialize_dq_session(session_name = 'cnc_sp_process_test',
                      working_directory = getwd(),
                      db_conn = conn,
                      is_json = FALSE,
                      file_subdirectory = system.file('extdata',
                                        package = 'clinicalevents.specialties'),
                      cdm_schema = NA)

#' Build mock study cohort
cohort <- cdm_tbl('person') \%>\% dplyr::distinct(person_id) \%>\%
  dplyr::mutate(start_date = as.Date(-5000),
                #RSQLite does not store date objects,
                #hence the numerics
                end_date = as.Date(15000),
                site = ifelse(person_id \%in\% c(1:6), 'synth1', 'synth2'))

#' Prepare input tables
cnc_sp_visit_tbl <- dplyr::tibble(visit_concept_id = c(9201,9202,9203),
                                  visit_type = c('inpatient', 'outpatient', 'emergency'))

cnc_sp_concept_tbl <- dplyr::tibble(domain = 'Hypertension',
                                    domain_tbl = 'condition_occurrence',
                                    concept_field = 'condition_concept_id',
                                    date_field = 'condition_start_date',
                                    vocabulary_field = NA,
                                    codeset_name = 'dx_hypertension')

#' Execute `cnc_sp_process` function
#' This example will use the single site, exploratory, cross sectional
#' configuration
cnc_sp_process_example <- cnc_sp_process(cohort = cohort,
                                         omop_or_pcornet = 'omop',
                                         multi_or_single_site = 'single',
                                         codeset_tbl = cnc_sp_concept_tbl,
                                         visit_type_tbl = cnc_sp_visit_tbl,
                                         time = FALSE)

cnc_sp_process_example$cnc_sp_process_output
cnc_sp_process_example$cnc_sp_process_names

#' Execute `cnc_sp_output` function
cnc_sp_output_example <-
  cnc_sp_output(cnc_sp_process_output =
                  cnc_sp_process_example$cnc_sp_process_output,
                cnc_sp_process_names =
                  cnc_sp_process_example$cnc_sp_process_names \%>\%
                    dplyr::mutate(specialty_name = 'General Pediatrics'),
                multi_or_single_site = 'single',
                anomaly_or_exploratory = 'exploratory',
                time = FALSE,
                facet_vars = c('visit_type'))

cnc_sp_output_example

#' Easily convert the graph into an interactive ggiraph or plotly object with
#' `make_interactive_ssdqa()`

make_interactive_ssdqa(cnc_sp_output_example)
}
